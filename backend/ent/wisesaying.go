// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"geulSsi/ent/wisesaying"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WiseSaying is the model entity for the WiseSaying schema.
type WiseSaying struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WiseSaying holds the value of the "wise_saying" field.
	WiseSaying string `json:"wise_saying,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WiseSaying) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wisesaying.FieldID:
			values[i] = new(sql.NullInt64)
		case wisesaying.FieldWiseSaying, wisesaying.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case wisesaying.FieldCreatedAt, wisesaying.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WiseSaying fields.
func (ws *WiseSaying) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wisesaying.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ws.ID = int(value.Int64)
		case wisesaying.FieldWiseSaying:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wise_saying", values[i])
			} else if value.Valid {
				ws.WiseSaying = value.String
			}
		case wisesaying.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ws.CreatedBy = value.String
			}
		case wisesaying.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ws.CreatedAt = value.Time
			}
		case wisesaying.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ws.UpdatedAt = value.Time
			}
		default:
			ws.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WiseSaying.
// This includes values selected through modifiers, order, etc.
func (ws *WiseSaying) Value(name string) (ent.Value, error) {
	return ws.selectValues.Get(name)
}

// Update returns a builder for updating this WiseSaying.
// Note that you need to call WiseSaying.Unwrap() before calling this method if this WiseSaying
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WiseSaying) Update() *WiseSayingUpdateOne {
	return NewWiseSayingClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WiseSaying entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WiseSaying) Unwrap() *WiseSaying {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("ent: WiseSaying is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WiseSaying) String() string {
	var builder strings.Builder
	builder.WriteString("WiseSaying(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("wise_saying=")
	builder.WriteString(ws.WiseSaying)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ws.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ws.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ws.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WiseSayings is a parsable slice of WiseSaying.
type WiseSayings []*WiseSaying
