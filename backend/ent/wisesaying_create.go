// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"geulSsi/ent/wisesaying"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WiseSayingCreate is the builder for creating a WiseSaying entity.
type WiseSayingCreate struct {
	config
	mutation *WiseSayingMutation
	hooks    []Hook
}

// SetWiseSaying sets the "wise_saying" field.
func (wsc *WiseSayingCreate) SetWiseSaying(s string) *WiseSayingCreate {
	wsc.mutation.SetWiseSaying(s)
	return wsc
}

// SetCreatedBy sets the "created_by" field.
func (wsc *WiseSayingCreate) SetCreatedBy(s string) *WiseSayingCreate {
	wsc.mutation.SetCreatedBy(s)
	return wsc
}

// SetCreatedAt sets the "created_at" field.
func (wsc *WiseSayingCreate) SetCreatedAt(t time.Time) *WiseSayingCreate {
	wsc.mutation.SetCreatedAt(t)
	return wsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsc *WiseSayingCreate) SetNillableCreatedAt(t *time.Time) *WiseSayingCreate {
	if t != nil {
		wsc.SetCreatedAt(*t)
	}
	return wsc
}

// SetUpdatedAt sets the "updated_at" field.
func (wsc *WiseSayingCreate) SetUpdatedAt(t time.Time) *WiseSayingCreate {
	wsc.mutation.SetUpdatedAt(t)
	return wsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wsc *WiseSayingCreate) SetNillableUpdatedAt(t *time.Time) *WiseSayingCreate {
	if t != nil {
		wsc.SetUpdatedAt(*t)
	}
	return wsc
}

// Mutation returns the WiseSayingMutation object of the builder.
func (wsc *WiseSayingCreate) Mutation() *WiseSayingMutation {
	return wsc.mutation
}

// Save creates the WiseSaying in the database.
func (wsc *WiseSayingCreate) Save(ctx context.Context) (*WiseSaying, error) {
	wsc.defaults()
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WiseSayingCreate) SaveX(ctx context.Context) *WiseSaying {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WiseSayingCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WiseSayingCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WiseSayingCreate) defaults() {
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		v := wisesaying.DefaultCreatedAt()
		wsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wsc.mutation.UpdatedAt(); !ok {
		v := wisesaying.DefaultUpdatedAt()
		wsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WiseSayingCreate) check() error {
	if _, ok := wsc.mutation.WiseSaying(); !ok {
		return &ValidationError{Name: "wise_saying", err: errors.New(`ent: missing required field "WiseSaying.wise_saying"`)}
	}
	if _, ok := wsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "WiseSaying.created_by"`)}
	}
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WiseSaying.created_at"`)}
	}
	if _, ok := wsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WiseSaying.updated_at"`)}
	}
	return nil
}

func (wsc *WiseSayingCreate) sqlSave(ctx context.Context) (*WiseSaying, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WiseSayingCreate) createSpec() (*WiseSaying, *sqlgraph.CreateSpec) {
	var (
		_node = &WiseSaying{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(wisesaying.Table, sqlgraph.NewFieldSpec(wisesaying.FieldID, field.TypeInt))
	)
	if value, ok := wsc.mutation.WiseSaying(); ok {
		_spec.SetField(wisesaying.FieldWiseSaying, field.TypeString, value)
		_node.WiseSaying = value
	}
	if value, ok := wsc.mutation.CreatedBy(); ok {
		_spec.SetField(wisesaying.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := wsc.mutation.CreatedAt(); ok {
		_spec.SetField(wisesaying.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wsc.mutation.UpdatedAt(); ok {
		_spec.SetField(wisesaying.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// WiseSayingCreateBulk is the builder for creating many WiseSaying entities in bulk.
type WiseSayingCreateBulk struct {
	config
	err      error
	builders []*WiseSayingCreate
}

// Save creates the WiseSaying entities in the database.
func (wscb *WiseSayingCreateBulk) Save(ctx context.Context) ([]*WiseSaying, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WiseSaying, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WiseSayingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WiseSayingCreateBulk) SaveX(ctx context.Context) []*WiseSaying {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WiseSayingCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WiseSayingCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}
