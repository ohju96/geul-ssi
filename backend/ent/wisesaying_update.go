// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"geulSsi/ent/predicate"
	"geulSsi/ent/wisesaying"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WiseSayingUpdate is the builder for updating WiseSaying entities.
type WiseSayingUpdate struct {
	config
	hooks    []Hook
	mutation *WiseSayingMutation
}

// Where appends a list predicates to the WiseSayingUpdate builder.
func (wsu *WiseSayingUpdate) Where(ps ...predicate.WiseSaying) *WiseSayingUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetWiseSaying sets the "wise_saying" field.
func (wsu *WiseSayingUpdate) SetWiseSaying(s string) *WiseSayingUpdate {
	wsu.mutation.SetWiseSaying(s)
	return wsu
}

// SetCreatedBy sets the "created_by" field.
func (wsu *WiseSayingUpdate) SetCreatedBy(s string) *WiseSayingUpdate {
	wsu.mutation.SetCreatedBy(s)
	return wsu
}

// SetCreatedAt sets the "created_at" field.
func (wsu *WiseSayingUpdate) SetCreatedAt(t time.Time) *WiseSayingUpdate {
	wsu.mutation.SetCreatedAt(t)
	return wsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsu *WiseSayingUpdate) SetNillableCreatedAt(t *time.Time) *WiseSayingUpdate {
	if t != nil {
		wsu.SetCreatedAt(*t)
	}
	return wsu
}

// SetUpdatedAt sets the "updated_at" field.
func (wsu *WiseSayingUpdate) SetUpdatedAt(t time.Time) *WiseSayingUpdate {
	wsu.mutation.SetUpdatedAt(t)
	return wsu
}

// Mutation returns the WiseSayingMutation object of the builder.
func (wsu *WiseSayingUpdate) Mutation() *WiseSayingMutation {
	return wsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WiseSayingUpdate) Save(ctx context.Context) (int, error) {
	wsu.defaults()
	return withHooks(ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WiseSayingUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WiseSayingUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WiseSayingUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsu *WiseSayingUpdate) defaults() {
	if _, ok := wsu.mutation.UpdatedAt(); !ok {
		v := wisesaying.UpdateDefaultUpdatedAt()
		wsu.mutation.SetUpdatedAt(v)
	}
}

func (wsu *WiseSayingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wisesaying.Table, wisesaying.Columns, sqlgraph.NewFieldSpec(wisesaying.FieldID, field.TypeInt))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.WiseSaying(); ok {
		_spec.SetField(wisesaying.FieldWiseSaying, field.TypeString, value)
	}
	if value, ok := wsu.mutation.CreatedBy(); ok {
		_spec.SetField(wisesaying.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := wsu.mutation.CreatedAt(); ok {
		_spec.SetField(wisesaying.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsu.mutation.UpdatedAt(); ok {
		_spec.SetField(wisesaying.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wisesaying.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WiseSayingUpdateOne is the builder for updating a single WiseSaying entity.
type WiseSayingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WiseSayingMutation
}

// SetWiseSaying sets the "wise_saying" field.
func (wsuo *WiseSayingUpdateOne) SetWiseSaying(s string) *WiseSayingUpdateOne {
	wsuo.mutation.SetWiseSaying(s)
	return wsuo
}

// SetCreatedBy sets the "created_by" field.
func (wsuo *WiseSayingUpdateOne) SetCreatedBy(s string) *WiseSayingUpdateOne {
	wsuo.mutation.SetCreatedBy(s)
	return wsuo
}

// SetCreatedAt sets the "created_at" field.
func (wsuo *WiseSayingUpdateOne) SetCreatedAt(t time.Time) *WiseSayingUpdateOne {
	wsuo.mutation.SetCreatedAt(t)
	return wsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsuo *WiseSayingUpdateOne) SetNillableCreatedAt(t *time.Time) *WiseSayingUpdateOne {
	if t != nil {
		wsuo.SetCreatedAt(*t)
	}
	return wsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wsuo *WiseSayingUpdateOne) SetUpdatedAt(t time.Time) *WiseSayingUpdateOne {
	wsuo.mutation.SetUpdatedAt(t)
	return wsuo
}

// Mutation returns the WiseSayingMutation object of the builder.
func (wsuo *WiseSayingUpdateOne) Mutation() *WiseSayingMutation {
	return wsuo.mutation
}

// Where appends a list predicates to the WiseSayingUpdate builder.
func (wsuo *WiseSayingUpdateOne) Where(ps ...predicate.WiseSaying) *WiseSayingUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WiseSayingUpdateOne) Select(field string, fields ...string) *WiseSayingUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WiseSaying entity.
func (wsuo *WiseSayingUpdateOne) Save(ctx context.Context) (*WiseSaying, error) {
	wsuo.defaults()
	return withHooks(ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WiseSayingUpdateOne) SaveX(ctx context.Context) *WiseSaying {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WiseSayingUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WiseSayingUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsuo *WiseSayingUpdateOne) defaults() {
	if _, ok := wsuo.mutation.UpdatedAt(); !ok {
		v := wisesaying.UpdateDefaultUpdatedAt()
		wsuo.mutation.SetUpdatedAt(v)
	}
}

func (wsuo *WiseSayingUpdateOne) sqlSave(ctx context.Context) (_node *WiseSaying, err error) {
	_spec := sqlgraph.NewUpdateSpec(wisesaying.Table, wisesaying.Columns, sqlgraph.NewFieldSpec(wisesaying.FieldID, field.TypeInt))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WiseSaying.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wisesaying.FieldID)
		for _, f := range fields {
			if !wisesaying.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wisesaying.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.WiseSaying(); ok {
		_spec.SetField(wisesaying.FieldWiseSaying, field.TypeString, value)
	}
	if value, ok := wsuo.mutation.CreatedBy(); ok {
		_spec.SetField(wisesaying.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := wsuo.mutation.CreatedAt(); ok {
		_spec.SetField(wisesaying.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wisesaying.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &WiseSaying{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wisesaying.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
