// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"geulSsi/ent/heart"
	"geulSsi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeartUpdate is the builder for updating Heart entities.
type HeartUpdate struct {
	config
	hooks    []Hook
	mutation *HeartMutation
}

// Where appends a list predicates to the HeartUpdate builder.
func (hu *HeartUpdate) Where(ps ...predicate.Heart) *HeartUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetEventID sets the "event_id" field.
func (hu *HeartUpdate) SetEventID(i int) *HeartUpdate {
	hu.mutation.ResetEventID()
	hu.mutation.SetEventID(i)
	return hu
}

// AddEventID adds i to the "event_id" field.
func (hu *HeartUpdate) AddEventID(i int) *HeartUpdate {
	hu.mutation.AddEventID(i)
	return hu
}

// SetWriter sets the "writer" field.
func (hu *HeartUpdate) SetWriter(s string) *HeartUpdate {
	hu.mutation.SetWriter(s)
	return hu
}

// SetIsHeart sets the "is_heart" field.
func (hu *HeartUpdate) SetIsHeart(b bool) *HeartUpdate {
	hu.mutation.SetIsHeart(b)
	return hu
}

// SetNillableIsHeart sets the "is_heart" field if the given value is not nil.
func (hu *HeartUpdate) SetNillableIsHeart(b *bool) *HeartUpdate {
	if b != nil {
		hu.SetIsHeart(*b)
	}
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HeartUpdate) SetCreatedAt(t time.Time) *HeartUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HeartUpdate) SetNillableCreatedAt(t *time.Time) *HeartUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// Mutation returns the HeartMutation object of the builder.
func (hu *HeartUpdate) Mutation() *HeartMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HeartUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HeartUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HeartUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HeartUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HeartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(heart.Table, heart.Columns, sqlgraph.NewFieldSpec(heart.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.EventID(); ok {
		_spec.SetField(heart.FieldEventID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedEventID(); ok {
		_spec.AddField(heart.FieldEventID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Writer(); ok {
		_spec.SetField(heart.FieldWriter, field.TypeString, value)
	}
	if value, ok := hu.mutation.IsHeart(); ok {
		_spec.SetField(heart.FieldIsHeart, field.TypeBool, value)
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.SetField(heart.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HeartUpdateOne is the builder for updating a single Heart entity.
type HeartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeartMutation
}

// SetEventID sets the "event_id" field.
func (huo *HeartUpdateOne) SetEventID(i int) *HeartUpdateOne {
	huo.mutation.ResetEventID()
	huo.mutation.SetEventID(i)
	return huo
}

// AddEventID adds i to the "event_id" field.
func (huo *HeartUpdateOne) AddEventID(i int) *HeartUpdateOne {
	huo.mutation.AddEventID(i)
	return huo
}

// SetWriter sets the "writer" field.
func (huo *HeartUpdateOne) SetWriter(s string) *HeartUpdateOne {
	huo.mutation.SetWriter(s)
	return huo
}

// SetIsHeart sets the "is_heart" field.
func (huo *HeartUpdateOne) SetIsHeart(b bool) *HeartUpdateOne {
	huo.mutation.SetIsHeart(b)
	return huo
}

// SetNillableIsHeart sets the "is_heart" field if the given value is not nil.
func (huo *HeartUpdateOne) SetNillableIsHeart(b *bool) *HeartUpdateOne {
	if b != nil {
		huo.SetIsHeart(*b)
	}
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HeartUpdateOne) SetCreatedAt(t time.Time) *HeartUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HeartUpdateOne) SetNillableCreatedAt(t *time.Time) *HeartUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// Mutation returns the HeartMutation object of the builder.
func (huo *HeartUpdateOne) Mutation() *HeartMutation {
	return huo.mutation
}

// Where appends a list predicates to the HeartUpdate builder.
func (huo *HeartUpdateOne) Where(ps ...predicate.Heart) *HeartUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HeartUpdateOne) Select(field string, fields ...string) *HeartUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Heart entity.
func (huo *HeartUpdateOne) Save(ctx context.Context) (*Heart, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HeartUpdateOne) SaveX(ctx context.Context) *Heart {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HeartUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HeartUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HeartUpdateOne) sqlSave(ctx context.Context) (_node *Heart, err error) {
	_spec := sqlgraph.NewUpdateSpec(heart.Table, heart.Columns, sqlgraph.NewFieldSpec(heart.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Heart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, heart.FieldID)
		for _, f := range fields {
			if !heart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != heart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.EventID(); ok {
		_spec.SetField(heart.FieldEventID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedEventID(); ok {
		_spec.AddField(heart.FieldEventID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Writer(); ok {
		_spec.SetField(heart.FieldWriter, field.TypeString, value)
	}
	if value, ok := huo.mutation.IsHeart(); ok {
		_spec.SetField(heart.FieldIsHeart, field.TypeBool, value)
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.SetField(heart.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Heart{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
