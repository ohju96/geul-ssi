// Code generated by ent, DO NOT EDIT.

package heart

import (
	"geulSsi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Heart {
	return predicate.Heart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Heart {
	return predicate.Heart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Heart {
	return predicate.Heart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Heart {
	return predicate.Heart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Heart {
	return predicate.Heart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Heart {
	return predicate.Heart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Heart {
	return predicate.Heart(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldEventID, v))
}

// Writer applies equality check predicate on the "writer" field. It's identical to WriterEQ.
func Writer(v string) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldWriter, v))
}

// IsHeart applies equality check predicate on the "is_heart" field. It's identical to IsHeartEQ.
func IsHeart(v bool) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldIsHeart, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldCreatedAt, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.Heart {
	return predicate.Heart(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.Heart {
	return predicate.Heart(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.Heart {
	return predicate.Heart(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v int) predicate.Heart {
	return predicate.Heart(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v int) predicate.Heart {
	return predicate.Heart(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v int) predicate.Heart {
	return predicate.Heart(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v int) predicate.Heart {
	return predicate.Heart(sql.FieldLTE(FieldEventID, v))
}

// WriterEQ applies the EQ predicate on the "writer" field.
func WriterEQ(v string) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldWriter, v))
}

// WriterNEQ applies the NEQ predicate on the "writer" field.
func WriterNEQ(v string) predicate.Heart {
	return predicate.Heart(sql.FieldNEQ(FieldWriter, v))
}

// WriterIn applies the In predicate on the "writer" field.
func WriterIn(vs ...string) predicate.Heart {
	return predicate.Heart(sql.FieldIn(FieldWriter, vs...))
}

// WriterNotIn applies the NotIn predicate on the "writer" field.
func WriterNotIn(vs ...string) predicate.Heart {
	return predicate.Heart(sql.FieldNotIn(FieldWriter, vs...))
}

// WriterGT applies the GT predicate on the "writer" field.
func WriterGT(v string) predicate.Heart {
	return predicate.Heart(sql.FieldGT(FieldWriter, v))
}

// WriterGTE applies the GTE predicate on the "writer" field.
func WriterGTE(v string) predicate.Heart {
	return predicate.Heart(sql.FieldGTE(FieldWriter, v))
}

// WriterLT applies the LT predicate on the "writer" field.
func WriterLT(v string) predicate.Heart {
	return predicate.Heart(sql.FieldLT(FieldWriter, v))
}

// WriterLTE applies the LTE predicate on the "writer" field.
func WriterLTE(v string) predicate.Heart {
	return predicate.Heart(sql.FieldLTE(FieldWriter, v))
}

// WriterContains applies the Contains predicate on the "writer" field.
func WriterContains(v string) predicate.Heart {
	return predicate.Heart(sql.FieldContains(FieldWriter, v))
}

// WriterHasPrefix applies the HasPrefix predicate on the "writer" field.
func WriterHasPrefix(v string) predicate.Heart {
	return predicate.Heart(sql.FieldHasPrefix(FieldWriter, v))
}

// WriterHasSuffix applies the HasSuffix predicate on the "writer" field.
func WriterHasSuffix(v string) predicate.Heart {
	return predicate.Heart(sql.FieldHasSuffix(FieldWriter, v))
}

// WriterEqualFold applies the EqualFold predicate on the "writer" field.
func WriterEqualFold(v string) predicate.Heart {
	return predicate.Heart(sql.FieldEqualFold(FieldWriter, v))
}

// WriterContainsFold applies the ContainsFold predicate on the "writer" field.
func WriterContainsFold(v string) predicate.Heart {
	return predicate.Heart(sql.FieldContainsFold(FieldWriter, v))
}

// IsHeartEQ applies the EQ predicate on the "is_heart" field.
func IsHeartEQ(v bool) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldIsHeart, v))
}

// IsHeartNEQ applies the NEQ predicate on the "is_heart" field.
func IsHeartNEQ(v bool) predicate.Heart {
	return predicate.Heart(sql.FieldNEQ(FieldIsHeart, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Heart {
	return predicate.Heart(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Heart) predicate.Heart {
	return predicate.Heart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Heart) predicate.Heart {
	return predicate.Heart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Heart) predicate.Heart {
	return predicate.Heart(sql.NotPredicates(p))
}
